var search_data = {"index":{"searchIndex":["album","applicationcontroller","applicationhelper","artist","repository","albums","artists","sluggable","services","base","lastfmartist","musicbrainzartist","create_album_list()","ensure_unique_slug()","entity_exists?()","entity_exists?()","find_remote()","find_with_discographies()","find_with_empty_discographies()","format_pretty()","generate_artist_entity()","generate_slug()","generate_top_artists_datalist()","populate_empty_discographies()","populate_entity()","populate_entity()","preload_set()","preload_set()","remote_top_artists()","update_popular()","update_tmt_top_artists()","readme"],"longSearchIndex":["album","applicationcontroller","applicationhelper","artist","repository","repository::albums","repository::artists","repository::sluggable","services","services::base","services::lastfmartist","services::musicbrainzartist","services::musicbrainzartist::create_album_list()","repository::sluggable#ensure_unique_slug()","repository::albums#entity_exists?()","repository::artists#entity_exists?()","services::musicbrainzartist::find_remote()","repository::artists#find_with_discographies()","repository::artists#find_with_empty_discographies()","services::base::format_pretty()","services::lastfmartist::generate_artist_entity()","repository::sluggable#generate_slug()","services::lastfmartist::generate_top_artists_datalist()","services::musicbrainzartist::populate_empty_discographies()","repository::albums#populate_entity()","repository::artists#populate_entity()","repository::albums#preload_set()","repository::artists#preload_set()","services::lastfmartist::remote_top_artists()","repository::artists#update_popular()","services::lastfmartist::update_tmt_top_artists()",""],"info":[["Album","","Album.html","","<p>Represent a release by a musician or band.\n"],["ApplicationController","","ApplicationController.html","",""],["ApplicationHelper","","ApplicationHelper.html","",""],["Artist","","Artist.html","","<p>Represent a musician or a band\n"],["Repository","","Repository.html","",""],["Repository::Albums","","Repository/Albums.html","","<p>This class handles queries of Albums objects.\n"],["Repository::Artists","","Repository/Artists.html","","<p>This class handles queries of Artists objects.\n"],["Repository::Sluggable","","Repository/Sluggable.html","","<p>This class handles queries of Artists objects.\n"],["Services","","Services.html","",""],["Services::Base","","Services/Base.html","","<p>This is the base class of all the external data services.\n"],["Services::LastfmArtist","","Services/LastfmArtist.html","","<p>This class talks to the Lastfm API and generates artist entities from the\nAPI results\n"],["Services::MusicbrainzArtist","","Services/MusicbrainzArtist.html","","<p>This class talks to the Musicbrainz API and generates artist entities from\nthe API results\n"],["create_album_list","Services::MusicbrainzArtist","Services/MusicbrainzArtist.html#method-c-create_album_list","(artist, release_groups)","<p>Creates a list of albums and associates them to an artist\n"],["ensure_unique_slug","Repository::Sluggable","Repository/Sluggable.html#method-i-ensure_unique_slug","(slug)","<p>Ensures the slug is unique before saving. Will append a counter index to\nthe name until an available …\n"],["entity_exists?","Repository::Albums","Repository/Albums.html#method-i-entity_exists-3F","(album)","<p>Checks if the entity has been saved based on known attributes.\n"],["entity_exists?","Repository::Artists","Repository/Artists.html#method-i-entity_exists-3F","(artist)","<p>Checks if the entity has been saved based on known attributes.\n"],["find_remote","Services::MusicbrainzArtist","Services/MusicbrainzArtist.html#method-c-find_remote","(artist)","<p>Finds an artist using the MusicBrainz API using the known fields in the\nartist entity.\n"],["find_with_discographies","Repository::Artists","Repository/Artists.html#method-i-find_with_discographies","()","<p>Lists artists that have discographies.\n"],["find_with_empty_discographies","Repository::Artists","Repository/Artists.html#method-i-find_with_empty_discographies","()","<p>Lists artists that have no discography attached.\n"],["format_pretty","Services::Base","Services/Base.html#method-c-format_pretty","(json)","<p>Formats and indents json data and allows one to debug API answers from the\nconsole.\n"],["generate_artist_entity","Services::LastfmArtist","Services/LastfmArtist.html#method-c-generate_artist_entity","(data)","<p>Creates an Artist entity from the known API data format Only saved artists\nwhen a musicbrainz id is passed …\n"],["generate_slug","Repository::Sluggable","Repository/Sluggable.html#method-i-generate_slug","()","<p>Generates a slug based on entity attributes\n"],["generate_top_artists_datalist","Services::LastfmArtist","Services/LastfmArtist.html#method-c-generate_top_artists_datalist","(data)","<p>Formats a resultset of API data into a known data structure\n"],["populate_empty_discographies","Services::MusicbrainzArtist","Services/MusicbrainzArtist.html#method-c-populate_empty_discographies","()","<p>Populates the artists with empty discographies by querying MusicBrainz&#39;\ndatabase.\n"],["populate_entity","Repository::Albums","Repository/Albums.html#method-i-populate_entity","(album)","<p>Loads the entity based on known attributes.\n"],["populate_entity","Repository::Artists","Repository/Artists.html#method-i-populate_entity","(artist)","<p>Loads the entity based on known attributes.\n"],["preload_set","Repository::Albums","Repository/Albums.html#method-i-preload_set","(entities)","<p>Ensures albums have a local version saved.\n"],["preload_set","Repository::Artists","Repository/Artists.html#method-i-preload_set","(entities)","<p>Ensures artists have a local version saved.\n"],["remote_top_artists","Services::LastfmArtist","Services/LastfmArtist.html#method-c-remote_top_artists","()","<p>Fetches the list of current top artists on LastFm.\n"],["update_popular","Repository::Artists","Repository/Artists.html#method-i-update_popular","(artists)","<p>Updates a set of artists and marks them as current being popular.\n"],["update_tmt_top_artists","Services::LastfmArtist","Services/LastfmArtist.html#method-c-update_tmt_top_artists","()","<p>Update the list of popular artists on TMT.\n"],["README","","README_rdoc.html","","<p>README\n<p>This README would normally document whatever steps are necessary to get the\napplication up and …\n"]]}}